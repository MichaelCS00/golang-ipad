// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: base_common.proto

package mm_pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RetConst int32

const (
	RetConst_MM_OK                                  RetConst = 0
	RetConst_ERR_SERVER_FILE_EXPIRED                RetConst = -5103059
	RetConst_MM_BOTTLE_COUNT_ERR                    RetConst = 16
	RetConst_MM_BOTTLE_ERR_UNKNOWNTYPE              RetConst = 15
	RetConst_MM_BOTTLE_NOTEXIT                      RetConst = 17
	RetConst_MM_BOTTLE_PICKCOUNTINVALID             RetConst = 19
	RetConst_MM_BOTTLE_UINNOTMATCH                  RetConst = 18
	RetConst_MM_ERR_ACCESS_DENIED                   RetConst = -5
	RetConst_MM_ERR_ACCOUNT_BAN                     RetConst = -200
	RetConst_MM_ERR_ALPHA_FORBIDDEN                 RetConst = -75
	RetConst_MM_ERR_ANSWER_COUNT                    RetConst = -150
	RetConst_MM_ERR_ARG                             RetConst = -2
	RetConst_MM_ERR_AUTH_ANOTHERPLACE               RetConst = -100
	RetConst_MM_ERR_BADEMAIL                        RetConst = -28
	RetConst_MM_ERR_BATCHGETCONTACTPROFILE_MODE     RetConst = -45
	RetConst_MM_ERR_BIGBIZ_AUTH                     RetConst = -69
	RetConst_MM_ERR_BIND_EMAIL_SAME_AS_QMAIL        RetConst = -86
	RetConst_MM_ERR_BINDED_BY_OTHER                 RetConst = -85
	RetConst_MM_ERR_BINDUIN_BINDED                  RetConst = -50
	RetConst_MM_ERR_BIZ_FANS_LIMITED                RetConst = -87
	RetConst_MM_ERR_BLACKLIST                       RetConst = -22
	RetConst_MM_ERR_BLOCK_BY_SPAM                   RetConst = -106
	RetConst_MM_ERR_BOTTLEBANBYEXPOSE               RetConst = -2002
	RetConst_MM_ERR_CERT_EXPIRED                    RetConst = -102
	RetConst_MM_ERR_CHATROOM_NEED_INVITE            RetConst = -2012
	RetConst_MM_ERR_CHATROOM_PARTIAL_INVITE         RetConst = -2013
	RetConst_MM_ERR_CLIDB_ENCRYPT_KEYINFO_INVALID   RetConst = -2010
	RetConst_MM_ERR_CLIENT                          RetConst = -800000
	RetConst_MM_ERR_CONNECT_INFO_URL_INVALID        RetConst = -2011
	RetConst_MM_ERR_COOKIE_KICK                     RetConst = -2008
	RetConst_MM_ERR_CRITICALUPDATE                  RetConst = -16
	RetConst_MM_ERR_DOMAINDISABLE                   RetConst = -27
	RetConst_MM_ERR_DOMAINMAXLIMITED                RetConst = -26
	RetConst_MM_ERR_DOMAINVERIFIED                  RetConst = -25
	RetConst_MM_ERR_EMAIL_FORMAT                    RetConst = -111
	RetConst_MM_ERR_EMAILEXIST                      RetConst = -8
	RetConst_MM_ERR_EMAILNOTVERIFY                  RetConst = -9
	RetConst_MM_ERR_FACING_CREATECHATROOM_RETRY     RetConst = -432
	RetConst_MM_ERR_FAV_ALREADY                     RetConst = -400
	RetConst_MM_ERR_FILE_EXPIRED                    RetConst = -352
	RetConst_MM_ERR_FORCE_QUIT                      RetConst = -999999
	RetConst_MM_ERR_FORCE_REDIRECT                  RetConst = -2005
	RetConst_MM_ERR_FREQ_LIMITED                    RetConst = -34
	RetConst_MM_ERR_GETMFRIEND_NOT_READY            RetConst = -70
	RetConst_MM_ERR_GMAIL_IMAP                      RetConst = -63
	RetConst_MM_ERR_GMAIL_ONLINELIMITE              RetConst = -61
	RetConst_MM_ERR_GMAIL_PWD                       RetConst = -60
	RetConst_MM_ERR_GMAIL_WEBLOGIN                  RetConst = -62
	RetConst_MM_ERR_HAS_BINDED                      RetConst = -84
	RetConst_MM_ERR_HAS_NO_HEADIMG                  RetConst = -53
	RetConst_MM_ERR_HAS_UNBINDED                    RetConst = -83
	RetConst_MM_ERR_HAVE_BIND_FACEBOOK              RetConst = -67
	RetConst_MM_ERR_IDC_REDIRECT                    RetConst = -301
	RetConst_MM_ERR_IMG_READ                        RetConst = -1005
	RetConst_MM_ERR_INVALID_BIND_OPMODE             RetConst = -37
	RetConst_MM_ERR_INVALID_GROUPCARD_CONTACT       RetConst = -52
	RetConst_MM_ERR_INVALID_HDHEADIMG_REQ_TOTAL_LEN RetConst = -54
	RetConst_MM_ERR_INVALID_UPLOADMCONTACT_OPMODE   RetConst = -38
	RetConst_MM_ERR_IS_NOT_OWNER                    RetConst = -66
	RetConst_MM_ERR_KEYBUF_INVALID                  RetConst = -2006
	RetConst_MM_ERR_LBSBANBYEXPOSE                  RetConst = -2001
	RetConst_MM_ERR_LBSDATANOTFOUND                 RetConst = -2000
	RetConst_MM_ERR_LOGIN_QRCODE_UUID_EXPIRED       RetConst = -2007
	RetConst_MM_ERR_LOGIN_URL_DEVICE_UNSAFE         RetConst = -2009
	RetConst_MM_ERR_MEMBER_TOOMUCH                  RetConst = -23
	RetConst_MM_ERR_MOBILE_BINDED                   RetConst = -35
	RetConst_MM_ERR_MOBILE_FORMAT                   RetConst = -41
	RetConst_MM_ERR_MOBILE_NEEDADJUST               RetConst = -74
	RetConst_MM_ERR_MOBILE_NULL                     RetConst = -39
	RetConst_MM_ERR_MOBILE_UNBINDED                 RetConst = -36
	RetConst_MM_ERR_NEED_QQPWD                      RetConst = -49
	RetConst_MM_ERR_NEED_VERIFY                     RetConst = -6
	RetConst_MM_ERR_NEED_VERIFY_USER                RetConst = -44
	RetConst_MM_ERR_NEEDREG                         RetConst = -30
	RetConst_MM_ERR_NEEDSECONDPWD                   RetConst = -31
	RetConst_MM_ERR_NEW_USER                        RetConst = -79
	RetConst_MM_ERR_NICEQQ_EXPIRED                  RetConst = -72
	RetConst_MM_ERR_NICKNAMEINVALID                 RetConst = -15
	RetConst_MM_ERR_NICKRESERVED                    RetConst = -11
	RetConst_MM_ERR_NO_BOTTLECOUNT                  RetConst = -56
	RetConst_MM_ERR_NO_HDHEADIMG                    RetConst = -55
	RetConst_MM_ERR_NO_QUESTION                     RetConst = -152
	RetConst_MM_ERR_NO_RETRY                        RetConst = -101
	RetConst_MM_ERR_NODATA                          RetConst = -203
	RetConst_MM_ERR_NOTBINDQQ                       RetConst = -81
	RetConst_MM_ERR_NOTCHATROOMCONTACT              RetConst = -21
	RetConst_MM_ERR_NOTMICROBLOGCONTACT             RetConst = -20
	RetConst_MM_ERR_NOTOPENPRIVATEMSG               RetConst = -19
	RetConst_MM_ERR_NOTQQCONTACT                    RetConst = -46
	RetConst_MM_ERR_NOUPDATEINFO                    RetConst = -18
	RetConst_MM_ERR_NOUSER                          RetConst = -4
	RetConst_MM_ERR_OIDBTIMEOUT                     RetConst = -29
	RetConst_MM_ERR_ONE_BINDTYPE_LEFT               RetConst = -82
	RetConst_MM_ERR_OTHER_MAIN_ACCT                 RetConst = -204
	RetConst_MM_ERR_PARSE_MAIL                      RetConst = -64
	RetConst_MM_ERR_PASSWORD                        RetConst = -3
	RetConst_MM_ERR_PICKBOTTLE_NOBOTTLE             RetConst = -58
	RetConst_MM_ERR_QA_RELATION                     RetConst = -153
	RetConst_MM_ERR_QQ_BAN                          RetConst = -201
	RetConst_MM_ERR_QQ_OK_NEED_MOBILE               RetConst = -205
	RetConst_MM_ERR_QRCODEVERIFY_BANBYEXPOSE        RetConst = -2004
	RetConst_MM_ERR_QUESTION_COUNT                  RetConst = -151
	RetConst_MM_ERR_RADAR_PASSWORD_SIMPLE           RetConst = -431
	RetConst_MM_ERR_RECOMMENDEDUPDATE               RetConst = -17
	RetConst_MM_ERR_REG_BUT_LOGIN                   RetConst = -212
	RetConst_MM_ERR_REVOKEMSG_TIMEOUT               RetConst = -430
	RetConst_MM_ERR_SEND_VERIFYCODE                 RetConst = -57
	RetConst_MM_ERR_SESSIONTIMEOUT                  RetConst = -13
	RetConst_MM_ERR_SHAKE_TRAN_IMG_CANCEL           RetConst = -90
	RetConst_MM_ERR_SHAKE_TRAN_IMG_CONTINUE         RetConst = -92
	RetConst_MM_ERR_SHAKE_TRAN_IMG_NOTFOUND         RetConst = -91
	RetConst_MM_ERR_SHAKE_TRAN_IMG_OTHER            RetConst = -93
	RetConst_MM_ERR_SHAKEBANBYEXPOSE                RetConst = -2003
	RetConst_MM_ERR_SHORTVIDEO_CANCEL               RetConst = 1000000
	RetConst_MM_ERR_SPAM                            RetConst = -24
	RetConst_MM_ERR_SVR_MOBILE_FORMAT               RetConst = -78
	RetConst_MM_ERR_SYS                             RetConst = -1
	RetConst_MM_ERR_TICKET_NOTFOUND                 RetConst = -48
	RetConst_MM_ERR_TICKET_UNMATCH                  RetConst = -47
	RetConst_MM_ERR_TOLIST_LIMITED                  RetConst = -71
	RetConst_MM_ERR_TRYQQPWD                        RetConst = -73
	RetConst_MM_ERR_UINEXIST                        RetConst = -12
	RetConst_MM_ERR_UNBIND_MAIN_ACCT                RetConst = -206
	RetConst_MM_ERR_UNBIND_MOBILE_NEED_QQPWD        RetConst = -202
	RetConst_MM_ERR_UNBIND_REGBYMOBILE              RetConst = -65
	RetConst_MM_ERR_UNMATCH_MOBILE                  RetConst = -40
	RetConst_MM_ERR_UNSUPPORT_COUNTRY               RetConst = -59
	RetConst_MM_ERR_USER_BIND_MOBILE                RetConst = -43
	RetConst_MM_ERR_USER_MOBILE_UNMATCH             RetConst = -42
	RetConst_MM_ERR_USER_NOT_SUPPORT                RetConst = -94
	RetConst_MM_ERR_USER_NOT_VERIFYUSER             RetConst = -302
	RetConst_MM_ERR_USEREXIST                       RetConst = -7
	RetConst_MM_ERR_USERNAMEINVALID                 RetConst = -14
	RetConst_MM_ERR_USERRESERVED                    RetConst = -10
	RetConst_MM_ERR_UUID_BINDED                     RetConst = -76
	RetConst_MM_ERR_VERIFYCODE_NOTEXIST             RetConst = -51
	RetConst_MM_ERR_VERIFYCODE_TIMEOUT              RetConst = -33
	RetConst_MM_ERR_VERIFYCODE_UNMATCH              RetConst = -32
	RetConst_MM_ERR_WEIBO_PUSH_TRANS                RetConst = -80
	RetConst_MM_ERR_WRONG_SESSION_KEY               RetConst = -77
	RetConst_MM_FACEBOOK_ACCESSTOKEN_UNVALID        RetConst = -68
	RetConst_MMSNS_RET_BAN                          RetConst = 202
	RetConst_MMSNS_RET_CLIENTID_EXIST               RetConst = 206
	RetConst_MMSNS_RET_COMMENT_HAVE_LIKE            RetConst = 204
	RetConst_MMSNS_RET_COMMENT_NOT_ALLOW            RetConst = 205
	RetConst_MMSNS_RET_COMMENT_PRIVACY              RetConst = 208
	RetConst_MMSNS_RET_ISALL                        RetConst = 207
	RetConst_MMSNS_RET_PRIVACY                      RetConst = 203
	RetConst_MMSNS_RET_SPAM                         RetConst = 201
)

// Enum value maps for RetConst.
var (
	RetConst_name = map[int32]string{
		0:        "MM_OK",
		-5103059: "ERR_SERVER_FILE_EXPIRED",
		16:       "MM_BOTTLE_COUNT_ERR",
		15:       "MM_BOTTLE_ERR_UNKNOWNTYPE",
		17:       "MM_BOTTLE_NOTEXIT",
		19:       "MM_BOTTLE_PICKCOUNTINVALID",
		18:       "MM_BOTTLE_UINNOTMATCH",
		-5:       "MM_ERR_ACCESS_DENIED",
		-200:     "MM_ERR_ACCOUNT_BAN",
		-75:      "MM_ERR_ALPHA_FORBIDDEN",
		-150:     "MM_ERR_ANSWER_COUNT",
		-2:       "MM_ERR_ARG",
		-100:     "MM_ERR_AUTH_ANOTHERPLACE",
		-28:      "MM_ERR_BADEMAIL",
		-45:      "MM_ERR_BATCHGETCONTACTPROFILE_MODE",
		-69:      "MM_ERR_BIGBIZ_AUTH",
		-86:      "MM_ERR_BIND_EMAIL_SAME_AS_QMAIL",
		-85:      "MM_ERR_BINDED_BY_OTHER",
		-50:      "MM_ERR_BINDUIN_BINDED",
		-87:      "MM_ERR_BIZ_FANS_LIMITED",
		-22:      "MM_ERR_BLACKLIST",
		-106:     "MM_ERR_BLOCK_BY_SPAM",
		-2002:    "MM_ERR_BOTTLEBANBYEXPOSE",
		-102:     "MM_ERR_CERT_EXPIRED",
		-2012:    "MM_ERR_CHATROOM_NEED_INVITE",
		-2013:    "MM_ERR_CHATROOM_PARTIAL_INVITE",
		-2010:    "MM_ERR_CLIDB_ENCRYPT_KEYINFO_INVALID",
		-800000:  "MM_ERR_CLIENT",
		-2011:    "MM_ERR_CONNECT_INFO_URL_INVALID",
		-2008:    "MM_ERR_COOKIE_KICK",
		-16:      "MM_ERR_CRITICALUPDATE",
		-27:      "MM_ERR_DOMAINDISABLE",
		-26:      "MM_ERR_DOMAINMAXLIMITED",
		-25:      "MM_ERR_DOMAINVERIFIED",
		-111:     "MM_ERR_EMAIL_FORMAT",
		-8:       "MM_ERR_EMAILEXIST",
		-9:       "MM_ERR_EMAILNOTVERIFY",
		-432:     "MM_ERR_FACING_CREATECHATROOM_RETRY",
		-400:     "MM_ERR_FAV_ALREADY",
		-352:     "MM_ERR_FILE_EXPIRED",
		-999999:  "MM_ERR_FORCE_QUIT",
		-2005:    "MM_ERR_FORCE_REDIRECT",
		-34:      "MM_ERR_FREQ_LIMITED",
		-70:      "MM_ERR_GETMFRIEND_NOT_READY",
		-63:      "MM_ERR_GMAIL_IMAP",
		-61:      "MM_ERR_GMAIL_ONLINELIMITE",
		-60:      "MM_ERR_GMAIL_PWD",
		-62:      "MM_ERR_GMAIL_WEBLOGIN",
		-84:      "MM_ERR_HAS_BINDED",
		-53:      "MM_ERR_HAS_NO_HEADIMG",
		-83:      "MM_ERR_HAS_UNBINDED",
		-67:      "MM_ERR_HAVE_BIND_FACEBOOK",
		-301:     "MM_ERR_IDC_REDIRECT",
		-1005:    "MM_ERR_IMG_READ",
		-37:      "MM_ERR_INVALID_BIND_OPMODE",
		-52:      "MM_ERR_INVALID_GROUPCARD_CONTACT",
		-54:      "MM_ERR_INVALID_HDHEADIMG_REQ_TOTAL_LEN",
		-38:      "MM_ERR_INVALID_UPLOADMCONTACT_OPMODE",
		-66:      "MM_ERR_IS_NOT_OWNER",
		-2006:    "MM_ERR_KEYBUF_INVALID",
		-2001:    "MM_ERR_LBSBANBYEXPOSE",
		-2000:    "MM_ERR_LBSDATANOTFOUND",
		-2007:    "MM_ERR_LOGIN_QRCODE_UUID_EXPIRED",
		-2009:    "MM_ERR_LOGIN_URL_DEVICE_UNSAFE",
		-23:      "MM_ERR_MEMBER_TOOMUCH",
		-35:      "MM_ERR_MOBILE_BINDED",
		-41:      "MM_ERR_MOBILE_FORMAT",
		-74:      "MM_ERR_MOBILE_NEEDADJUST",
		-39:      "MM_ERR_MOBILE_NULL",
		-36:      "MM_ERR_MOBILE_UNBINDED",
		-49:      "MM_ERR_NEED_QQPWD",
		-6:       "MM_ERR_NEED_VERIFY",
		-44:      "MM_ERR_NEED_VERIFY_USER",
		-30:      "MM_ERR_NEEDREG",
		-31:      "MM_ERR_NEEDSECONDPWD",
		-79:      "MM_ERR_NEW_USER",
		-72:      "MM_ERR_NICEQQ_EXPIRED",
		-15:      "MM_ERR_NICKNAMEINVALID",
		-11:      "MM_ERR_NICKRESERVED",
		-56:      "MM_ERR_NO_BOTTLECOUNT",
		-55:      "MM_ERR_NO_HDHEADIMG",
		-152:     "MM_ERR_NO_QUESTION",
		-101:     "MM_ERR_NO_RETRY",
		-203:     "MM_ERR_NODATA",
		-81:      "MM_ERR_NOTBINDQQ",
		-21:      "MM_ERR_NOTCHATROOMCONTACT",
		-20:      "MM_ERR_NOTMICROBLOGCONTACT",
		-19:      "MM_ERR_NOTOPENPRIVATEMSG",
		-46:      "MM_ERR_NOTQQCONTACT",
		-18:      "MM_ERR_NOUPDATEINFO",
		-4:       "MM_ERR_NOUSER",
		-29:      "MM_ERR_OIDBTIMEOUT",
		-82:      "MM_ERR_ONE_BINDTYPE_LEFT",
		-204:     "MM_ERR_OTHER_MAIN_ACCT",
		-64:      "MM_ERR_PARSE_MAIL",
		-3:       "MM_ERR_PASSWORD",
		-58:      "MM_ERR_PICKBOTTLE_NOBOTTLE",
		-153:     "MM_ERR_QA_RELATION",
		-201:     "MM_ERR_QQ_BAN",
		-205:     "MM_ERR_QQ_OK_NEED_MOBILE",
		-2004:    "MM_ERR_QRCODEVERIFY_BANBYEXPOSE",
		-151:     "MM_ERR_QUESTION_COUNT",
		-431:     "MM_ERR_RADAR_PASSWORD_SIMPLE",
		-17:      "MM_ERR_RECOMMENDEDUPDATE",
		-212:     "MM_ERR_REG_BUT_LOGIN",
		-430:     "MM_ERR_REVOKEMSG_TIMEOUT",
		-57:      "MM_ERR_SEND_VERIFYCODE",
		-13:      "MM_ERR_SESSIONTIMEOUT",
		-90:      "MM_ERR_SHAKE_TRAN_IMG_CANCEL",
		-92:      "MM_ERR_SHAKE_TRAN_IMG_CONTINUE",
		-91:      "MM_ERR_SHAKE_TRAN_IMG_NOTFOUND",
		-93:      "MM_ERR_SHAKE_TRAN_IMG_OTHER",
		-2003:    "MM_ERR_SHAKEBANBYEXPOSE",
		1000000:  "MM_ERR_SHORTVIDEO_CANCEL",
		-24:      "MM_ERR_SPAM",
		-78:      "MM_ERR_SVR_MOBILE_FORMAT",
		-1:       "MM_ERR_SYS",
		-48:      "MM_ERR_TICKET_NOTFOUND",
		-47:      "MM_ERR_TICKET_UNMATCH",
		-71:      "MM_ERR_TOLIST_LIMITED",
		-73:      "MM_ERR_TRYQQPWD",
		-12:      "MM_ERR_UINEXIST",
		-206:     "MM_ERR_UNBIND_MAIN_ACCT",
		-202:     "MM_ERR_UNBIND_MOBILE_NEED_QQPWD",
		-65:      "MM_ERR_UNBIND_REGBYMOBILE",
		-40:      "MM_ERR_UNMATCH_MOBILE",
		-59:      "MM_ERR_UNSUPPORT_COUNTRY",
		-43:      "MM_ERR_USER_BIND_MOBILE",
		-42:      "MM_ERR_USER_MOBILE_UNMATCH",
		-94:      "MM_ERR_USER_NOT_SUPPORT",
		-302:     "MM_ERR_USER_NOT_VERIFYUSER",
		-7:       "MM_ERR_USEREXIST",
		-14:      "MM_ERR_USERNAMEINVALID",
		-10:      "MM_ERR_USERRESERVED",
		-76:      "MM_ERR_UUID_BINDED",
		-51:      "MM_ERR_VERIFYCODE_NOTEXIST",
		-33:      "MM_ERR_VERIFYCODE_TIMEOUT",
		-32:      "MM_ERR_VERIFYCODE_UNMATCH",
		-80:      "MM_ERR_WEIBO_PUSH_TRANS",
		-77:      "MM_ERR_WRONG_SESSION_KEY",
		-68:      "MM_FACEBOOK_ACCESSTOKEN_UNVALID",
		202:      "MMSNS_RET_BAN",
		206:      "MMSNS_RET_CLIENTID_EXIST",
		204:      "MMSNS_RET_COMMENT_HAVE_LIKE",
		205:      "MMSNS_RET_COMMENT_NOT_ALLOW",
		208:      "MMSNS_RET_COMMENT_PRIVACY",
		207:      "MMSNS_RET_ISALL",
		203:      "MMSNS_RET_PRIVACY",
		201:      "MMSNS_RET_SPAM",
	}
	RetConst_value = map[string]int32{
		"MM_OK":                                  0,
		"ERR_SERVER_FILE_EXPIRED":                -5103059,
		"MM_BOTTLE_COUNT_ERR":                    16,
		"MM_BOTTLE_ERR_UNKNOWNTYPE":              15,
		"MM_BOTTLE_NOTEXIT":                      17,
		"MM_BOTTLE_PICKCOUNTINVALID":             19,
		"MM_BOTTLE_UINNOTMATCH":                  18,
		"MM_ERR_ACCESS_DENIED":                   -5,
		"MM_ERR_ACCOUNT_BAN":                     -200,
		"MM_ERR_ALPHA_FORBIDDEN":                 -75,
		"MM_ERR_ANSWER_COUNT":                    -150,
		"MM_ERR_ARG":                             -2,
		"MM_ERR_AUTH_ANOTHERPLACE":               -100,
		"MM_ERR_BADEMAIL":                        -28,
		"MM_ERR_BATCHGETCONTACTPROFILE_MODE":     -45,
		"MM_ERR_BIGBIZ_AUTH":                     -69,
		"MM_ERR_BIND_EMAIL_SAME_AS_QMAIL":        -86,
		"MM_ERR_BINDED_BY_OTHER":                 -85,
		"MM_ERR_BINDUIN_BINDED":                  -50,
		"MM_ERR_BIZ_FANS_LIMITED":                -87,
		"MM_ERR_BLACKLIST":                       -22,
		"MM_ERR_BLOCK_BY_SPAM":                   -106,
		"MM_ERR_BOTTLEBANBYEXPOSE":               -2002,
		"MM_ERR_CERT_EXPIRED":                    -102,
		"MM_ERR_CHATROOM_NEED_INVITE":            -2012,
		"MM_ERR_CHATROOM_PARTIAL_INVITE":         -2013,
		"MM_ERR_CLIDB_ENCRYPT_KEYINFO_INVALID":   -2010,
		"MM_ERR_CLIENT":                          -800000,
		"MM_ERR_CONNECT_INFO_URL_INVALID":        -2011,
		"MM_ERR_COOKIE_KICK":                     -2008,
		"MM_ERR_CRITICALUPDATE":                  -16,
		"MM_ERR_DOMAINDISABLE":                   -27,
		"MM_ERR_DOMAINMAXLIMITED":                -26,
		"MM_ERR_DOMAINVERIFIED":                  -25,
		"MM_ERR_EMAIL_FORMAT":                    -111,
		"MM_ERR_EMAILEXIST":                      -8,
		"MM_ERR_EMAILNOTVERIFY":                  -9,
		"MM_ERR_FACING_CREATECHATROOM_RETRY":     -432,
		"MM_ERR_FAV_ALREADY":                     -400,
		"MM_ERR_FILE_EXPIRED":                    -352,
		"MM_ERR_FORCE_QUIT":                      -999999,
		"MM_ERR_FORCE_REDIRECT":                  -2005,
		"MM_ERR_FREQ_LIMITED":                    -34,
		"MM_ERR_GETMFRIEND_NOT_READY":            -70,
		"MM_ERR_GMAIL_IMAP":                      -63,
		"MM_ERR_GMAIL_ONLINELIMITE":              -61,
		"MM_ERR_GMAIL_PWD":                       -60,
		"MM_ERR_GMAIL_WEBLOGIN":                  -62,
		"MM_ERR_HAS_BINDED":                      -84,
		"MM_ERR_HAS_NO_HEADIMG":                  -53,
		"MM_ERR_HAS_UNBINDED":                    -83,
		"MM_ERR_HAVE_BIND_FACEBOOK":              -67,
		"MM_ERR_IDC_REDIRECT":                    -301,
		"MM_ERR_IMG_READ":                        -1005,
		"MM_ERR_INVALID_BIND_OPMODE":             -37,
		"MM_ERR_INVALID_GROUPCARD_CONTACT":       -52,
		"MM_ERR_INVALID_HDHEADIMG_REQ_TOTAL_LEN": -54,
		"MM_ERR_INVALID_UPLOADMCONTACT_OPMODE":   -38,
		"MM_ERR_IS_NOT_OWNER":                    -66,
		"MM_ERR_KEYBUF_INVALID":                  -2006,
		"MM_ERR_LBSBANBYEXPOSE":                  -2001,
		"MM_ERR_LBSDATANOTFOUND":                 -2000,
		"MM_ERR_LOGIN_QRCODE_UUID_EXPIRED":       -2007,
		"MM_ERR_LOGIN_URL_DEVICE_UNSAFE":         -2009,
		"MM_ERR_MEMBER_TOOMUCH":                  -23,
		"MM_ERR_MOBILE_BINDED":                   -35,
		"MM_ERR_MOBILE_FORMAT":                   -41,
		"MM_ERR_MOBILE_NEEDADJUST":               -74,
		"MM_ERR_MOBILE_NULL":                     -39,
		"MM_ERR_MOBILE_UNBINDED":                 -36,
		"MM_ERR_NEED_QQPWD":                      -49,
		"MM_ERR_NEED_VERIFY":                     -6,
		"MM_ERR_NEED_VERIFY_USER":                -44,
		"MM_ERR_NEEDREG":                         -30,
		"MM_ERR_NEEDSECONDPWD":                   -31,
		"MM_ERR_NEW_USER":                        -79,
		"MM_ERR_NICEQQ_EXPIRED":                  -72,
		"MM_ERR_NICKNAMEINVALID":                 -15,
		"MM_ERR_NICKRESERVED":                    -11,
		"MM_ERR_NO_BOTTLECOUNT":                  -56,
		"MM_ERR_NO_HDHEADIMG":                    -55,
		"MM_ERR_NO_QUESTION":                     -152,
		"MM_ERR_NO_RETRY":                        -101,
		"MM_ERR_NODATA":                          -203,
		"MM_ERR_NOTBINDQQ":                       -81,
		"MM_ERR_NOTCHATROOMCONTACT":              -21,
		"MM_ERR_NOTMICROBLOGCONTACT":             -20,
		"MM_ERR_NOTOPENPRIVATEMSG":               -19,
		"MM_ERR_NOTQQCONTACT":                    -46,
		"MM_ERR_NOUPDATEINFO":                    -18,
		"MM_ERR_NOUSER":                          -4,
		"MM_ERR_OIDBTIMEOUT":                     -29,
		"MM_ERR_ONE_BINDTYPE_LEFT":               -82,
		"MM_ERR_OTHER_MAIN_ACCT":                 -204,
		"MM_ERR_PARSE_MAIL":                      -64,
		"MM_ERR_PASSWORD":                        -3,
		"MM_ERR_PICKBOTTLE_NOBOTTLE":             -58,
		"MM_ERR_QA_RELATION":                     -153,
		"MM_ERR_QQ_BAN":                          -201,
		"MM_ERR_QQ_OK_NEED_MOBILE":               -205,
		"MM_ERR_QRCODEVERIFY_BANBYEXPOSE":        -2004,
		"MM_ERR_QUESTION_COUNT":                  -151,
		"MM_ERR_RADAR_PASSWORD_SIMPLE":           -431,
		"MM_ERR_RECOMMENDEDUPDATE":               -17,
		"MM_ERR_REG_BUT_LOGIN":                   -212,
		"MM_ERR_REVOKEMSG_TIMEOUT":               -430,
		"MM_ERR_SEND_VERIFYCODE":                 -57,
		"MM_ERR_SESSIONTIMEOUT":                  -13,
		"MM_ERR_SHAKE_TRAN_IMG_CANCEL":           -90,
		"MM_ERR_SHAKE_TRAN_IMG_CONTINUE":         -92,
		"MM_ERR_SHAKE_TRAN_IMG_NOTFOUND":         -91,
		"MM_ERR_SHAKE_TRAN_IMG_OTHER":            -93,
		"MM_ERR_SHAKEBANBYEXPOSE":                -2003,
		"MM_ERR_SHORTVIDEO_CANCEL":               1000000,
		"MM_ERR_SPAM":                            -24,
		"MM_ERR_SVR_MOBILE_FORMAT":               -78,
		"MM_ERR_SYS":                             -1,
		"MM_ERR_TICKET_NOTFOUND":                 -48,
		"MM_ERR_TICKET_UNMATCH":                  -47,
		"MM_ERR_TOLIST_LIMITED":                  -71,
		"MM_ERR_TRYQQPWD":                        -73,
		"MM_ERR_UINEXIST":                        -12,
		"MM_ERR_UNBIND_MAIN_ACCT":                -206,
		"MM_ERR_UNBIND_MOBILE_NEED_QQPWD":        -202,
		"MM_ERR_UNBIND_REGBYMOBILE":              -65,
		"MM_ERR_UNMATCH_MOBILE":                  -40,
		"MM_ERR_UNSUPPORT_COUNTRY":               -59,
		"MM_ERR_USER_BIND_MOBILE":                -43,
		"MM_ERR_USER_MOBILE_UNMATCH":             -42,
		"MM_ERR_USER_NOT_SUPPORT":                -94,
		"MM_ERR_USER_NOT_VERIFYUSER":             -302,
		"MM_ERR_USEREXIST":                       -7,
		"MM_ERR_USERNAMEINVALID":                 -14,
		"MM_ERR_USERRESERVED":                    -10,
		"MM_ERR_UUID_BINDED":                     -76,
		"MM_ERR_VERIFYCODE_NOTEXIST":             -51,
		"MM_ERR_VERIFYCODE_TIMEOUT":              -33,
		"MM_ERR_VERIFYCODE_UNMATCH":              -32,
		"MM_ERR_WEIBO_PUSH_TRANS":                -80,
		"MM_ERR_WRONG_SESSION_KEY":               -77,
		"MM_FACEBOOK_ACCESSTOKEN_UNVALID":        -68,
		"MMSNS_RET_BAN":                          202,
		"MMSNS_RET_CLIENTID_EXIST":               206,
		"MMSNS_RET_COMMENT_HAVE_LIKE":            204,
		"MMSNS_RET_COMMENT_NOT_ALLOW":            205,
		"MMSNS_RET_COMMENT_PRIVACY":              208,
		"MMSNS_RET_ISALL":                        207,
		"MMSNS_RET_PRIVACY":                      203,
		"MMSNS_RET_SPAM":                         201,
	}
)

func (x RetConst) Enum() *RetConst {
	p := new(RetConst)
	*p = x
	return p
}

func (x RetConst) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetConst) Descriptor() protoreflect.EnumDescriptor {
	return file_base_common_proto_enumTypes[0].Descriptor()
}

func (RetConst) Type() protoreflect.EnumType {
	return &file_base_common_proto_enumTypes[0]
}

func (x RetConst) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RetConst) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RetConst(num)
	return nil
}

// Deprecated: Use RetConst.Descriptor instead.
func (RetConst) EnumDescriptor() ([]byte, []int) {
	return file_base_common_proto_rawDescGZIP(), []int{0}
}

type AesKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len *int32 `protobuf:"varint,1,req,name=len" json:"len,omitempty"`
	Key []byte `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
}

func (x *AesKey) Reset() {
	*x = AesKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AesKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AesKey) ProtoMessage() {}

func (x *AesKey) ProtoReflect() protoreflect.Message {
	mi := &file_base_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AesKey.ProtoReflect.Descriptor instead.
func (*AesKey) Descriptor() ([]byte, []int) {
	return file_base_common_proto_rawDescGZIP(), []int{0}
}

func (x *AesKey) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *AesKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type RSAPem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len *uint32 `protobuf:"varint,1,req,name=len" json:"len,omitempty"`
	Pem *string `protobuf:"bytes,2,req,name=pem" json:"pem,omitempty"`
}

func (x *RSAPem) Reset() {
	*x = RSAPem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSAPem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSAPem) ProtoMessage() {}

func (x *RSAPem) ProtoReflect() protoreflect.Message {
	mi := &file_base_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSAPem.ProtoReflect.Descriptor instead.
func (*RSAPem) Descriptor() ([]byte, []int) {
	return file_base_common_proto_rawDescGZIP(), []int{1}
}

func (x *RSAPem) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *RSAPem) GetPem() string {
	if x != nil && x.Pem != nil {
		return *x.Pem
	}
	return ""
}

type BaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKey    []byte  `protobuf:"bytes,1,req,name=sessionKey" json:"sessionKey,omitempty"`
	Uin           *int32  `protobuf:"varint,2,req,name=uin" json:"uin,omitempty"`
	DeviceId      []byte  `protobuf:"bytes,3,req,name=deviceId" json:"deviceId,omitempty"`
	ClientVersion *int32  `protobuf:"varint,4,req,name=clientVersion" json:"clientVersion,omitempty"`
	OsType        *string `protobuf:"bytes,5,req,name=osType" json:"osType,omitempty"`
	Scene         *int32  `protobuf:"varint,6,req,name=scene" json:"scene,omitempty"`
}

func (x *BaseRequest) Reset() {
	*x = BaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequest) ProtoMessage() {}

func (x *BaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequest.ProtoReflect.Descriptor instead.
func (*BaseRequest) Descriptor() ([]byte, []int) {
	return file_base_common_proto_rawDescGZIP(), []int{2}
}

func (x *BaseRequest) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *BaseRequest) GetUin() int32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *BaseRequest) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *BaseRequest) GetClientVersion() int32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *BaseRequest) GetOsType() string {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return ""
}

func (x *BaseRequest) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type SKBuiltinString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *string `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
}

func (x *SKBuiltinString) Reset() {
	*x = SKBuiltinString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinString) ProtoMessage() {}

func (x *SKBuiltinString) ProtoReflect() protoreflect.Message {
	mi := &file_base_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinString.ProtoReflect.Descriptor instead.
func (*SKBuiltinString) Descriptor() ([]byte, []int) {
	return file_base_common_proto_rawDescGZIP(), []int{3}
}

func (x *SKBuiltinString) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type SKBuiltinStringBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len    *uint32 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
	Buffer []byte  `protobuf:"bytes,2,opt,name=buffer" json:"buffer,omitempty"`
}

func (x *SKBuiltinStringBuffer) Reset() {
	*x = SKBuiltinStringBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinStringBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinStringBuffer) ProtoMessage() {}

func (x *SKBuiltinStringBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_base_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinStringBuffer.ProtoReflect.Descriptor instead.
func (*SKBuiltinStringBuffer) Descriptor() ([]byte, []int) {
	return file_base_common_proto_rawDescGZIP(), []int{4}
}

func (x *SKBuiltinStringBuffer) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *SKBuiltinStringBuffer) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *RetConst        `protobuf:"varint,1,req,name=ret,enum=mm_pb.RetConst" json:"ret,omitempty"`
	ErrMsg *SKBuiltinString `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_base_common_proto_rawDescGZIP(), []int{5}
}

func (x *BaseResponse) GetRet() RetConst {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return RetConst_MM_OK
}

func (x *BaseResponse) GetErrMsg() *SKBuiltinString {
	if x != nil {
		return x.ErrMsg
	}
	return nil
}

var File_base_common_proto protoreflect.FileDescriptor

var file_base_common_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6d, 0x5f, 0x70, 0x62, 0x22, 0x2c, 0x0a, 0x06, 0x41, 0x65,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2c, 0x0a, 0x06, 0x52, 0x53, 0x41, 0x50,
	0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x65, 0x6d, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x15, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x6d, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6d, 0x5f, 0x70,
	0x62, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x2a, 0xdc, 0x29, 0x0a, 0x08, 0x52, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4d, 0x5f, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xad, 0xc4, 0xc8,
	0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x42, 0x4f,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x10,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0f, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x45, 0x58, 0x49, 0x54, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4d, 0x5f, 0x42, 0x4f, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x42, 0x4f, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x4e, 0x4f, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x12, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x10, 0xb8, 0xfe, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10,
	0xb5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0xea, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x52, 0x47, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x10, 0x9c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2f, 0x0a, 0x22, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x47, 0x45, 0x54, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x47, 0x42, 0x49, 0x5a, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x10, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x51, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x55, 0x49,
	0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xce, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x49,
	0x5a, 0x5f, 0x46, 0x41, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0xa9,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x10, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xea, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x50, 0x41, 0x4d,
	0x10, 0x96, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x42, 0x41, 0x4e, 0x42,
	0x59, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x45, 0x10, 0xae, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x9a, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x10, 0xa4, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2b,
	0x0a, 0x1e, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f,
	0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x10, 0xa3, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x31, 0x0a, 0x24, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0xa6, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a,
	0x0a, 0x0d, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x80, 0x96, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xa5, 0xf0,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0xa8,
	0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a,
	0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x4d, 0x41, 0x58, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0xe6, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x10, 0x91, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x4e, 0x4f, 0x54, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x2f, 0x0a, 0x22, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0xd0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x41, 0x56, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xa0, 0xfd, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0xc1, 0xfb, 0xc2, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0xab, 0xf0,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10,
	0xde, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x4d, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4d, 0x41, 0x50, 0x10, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x45, 0x10, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x10,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x57, 0x44,
	0x10, 0xc4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x57, 0x45, 0x42, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x10, 0xc2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x42, 0x49,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0xac, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x49, 0x4d, 0x47, 0x10, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xad, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x48, 0x41, 0x56, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f,
	0x4f, 0x4b, 0x10, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a,
	0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x44, 0x43, 0x5f, 0x52, 0x45, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x10, 0xd3, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4d, 0x47, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x93, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a,
	0x1a, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xdb, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a, 0x20, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0xcc, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x33, 0x0a, 0x26, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x44, 0x48, 0x45, 0x41, 0x44, 0x49, 0x4d,
	0x47, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x10,
	0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x31, 0x0a, 0x24, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x4d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x4d, 0x4f,
	0x44, 0x45, 0x10, 0xda, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a,
	0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x10, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x42, 0x55, 0x46,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xaa, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x42,
	0x53, 0x42, 0x41, 0x4e, 0x42, 0x59, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x45, 0x10, 0xaf, 0xf0, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x4c, 0x42, 0x53, 0x44, 0x41, 0x54, 0x41, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0xb0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a, 0x20,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x51, 0x52, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0xa9, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2b, 0x0a, 0x1e, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x52, 0x4c, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x41, 0x46, 0x45, 0x10, 0xa7, 0xf0,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x55, 0x43,
	0x48, 0x10, 0xe9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x49,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0xdd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x10, 0xb6,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0xd9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x42, 0x49,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0xdc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x51,
	0x51, 0x50, 0x57, 0x44, 0x10, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xd4, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1b, 0x0a, 0x0e, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x4e, 0x45, 0x45, 0x44, 0x52, 0x45, 0x47, 0x10, 0xe2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x45,
	0x45, 0x44, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x50, 0x57, 0x44, 0x10, 0xe1, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e,
	0x49, 0x43, 0x45, 0x51, 0x51, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xb8, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a,
	0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x42, 0x4f, 0x54,
	0x54, 0x4c, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xc8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f,
	0x5f, 0x48, 0x44, 0x48, 0x45, 0x41, 0x44, 0x49, 0x4d, 0x47, 0x10, 0xc9, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x4e, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe8, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e,
	0x4f, 0x44, 0x41, 0x54, 0x41, 0x10, 0xb5, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1d, 0x0a, 0x10, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x42, 0x49,
	0x4e, 0x44, 0x51, 0x51, 0x10, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x26, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x43, 0x48, 0x41,
	0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0xeb, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x42, 0x4c, 0x4f, 0x47, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x4f, 0x50,
	0x45, 0x4e, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x4d, 0x53, 0x47, 0x10, 0xed, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x51, 0x51, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0xd2,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xfc, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x4f, 0x49, 0x44, 0x42, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xe3, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0xae, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x54, 0x10, 0xb4, 0xfe, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x50,
	0x41, 0x52, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x49, 0x43,
	0x4b, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45,
	0x10, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x41, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xe7, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x51, 0x5f, 0x42, 0x41, 0x4e, 0x10, 0xb7, 0xfe,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x51, 0x51, 0x5f, 0x4f, 0x4b, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x45, 0x10, 0xb3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x2c, 0x0a, 0x1f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x42, 0x59, 0x45, 0x58, 0x50, 0x4f,
	0x53, 0x45, 0x10, 0xac, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a,
	0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xe9, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x29, 0x0a, 0x1c, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x41, 0x44, 0x41,
	0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c,
	0x45, 0x10, 0xd1, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45,
	0x47, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xac, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0xd2, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a,
	0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x59, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xf3, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x1c, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x47, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0xa6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x2b, 0x0a, 0x1e, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x4b,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49,
	0x4e, 0x55, 0x45, 0x10, 0xa4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2b,
	0x0a, 0x1e, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0xa5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x5f, 0x49, 0x4d, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xa3, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x53, 0x48, 0x41, 0x4b, 0x45, 0x42, 0x41, 0x4e, 0x42, 0x59, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x45,
	0x10, 0xad, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0xc0, 0x84, 0x3d, 0x12, 0x18, 0x0a, 0x0b, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x50, 0x41, 0x4d, 0x10, 0xe8, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x53, 0x56, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x10, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a,
	0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0xd0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0xd1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22,
	0x0a, 0x15, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x4f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x52, 0x59,
	0x51, 0x51, 0x50, 0x57, 0x44, 0x10, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1c, 0x0a, 0x0f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x49, 0x4e, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24,
	0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x54, 0x10, 0xb2, 0xfe, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55,
	0x4e, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x45,
	0x44, 0x5f, 0x51, 0x51, 0x50, 0x57, 0x44, 0x10, 0xb6, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x42,
	0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x42, 0x59, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10,
	0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x10, 0xd8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25,
	0x0a, 0x18, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0xc5, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x10, 0xd5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0xa2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x59, 0x55, 0x53, 0x45, 0x52, 0x10, 0xd2, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x10, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x4e, 0x41, 0x4d, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xf2, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4d, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0xf6,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0xb4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x4d, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xcd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x59, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x4d,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x57, 0x45,
	0x49, 0x42, 0x4f, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0xb0,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x4d, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0xb3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x2c, 0x0a, 0x1f, 0x4d, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0xbc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x10,
	0xca, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xce,
	0x01, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45,
	0x10, 0xcc, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x10, 0xcd, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x43, 0x59, 0x10, 0xd0, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x10, 0xcf, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4d,
	0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59,
	0x10, 0xcb, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x54,
	0x5f, 0x53, 0x50, 0x41, 0x4d, 0x10, 0xc9, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x6d, 0x6d,
	0x5f, 0x70, 0x62,
}

var (
	file_base_common_proto_rawDescOnce sync.Once
	file_base_common_proto_rawDescData = file_base_common_proto_rawDesc
)

func file_base_common_proto_rawDescGZIP() []byte {
	file_base_common_proto_rawDescOnce.Do(func() {
		file_base_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_common_proto_rawDescData)
	})
	return file_base_common_proto_rawDescData
}

var file_base_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_base_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_base_common_proto_goTypes = []interface{}{
	(RetConst)(0),                 // 0: mm_pb.RetConst
	(*AesKey)(nil),                // 1: mm_pb.AesKey
	(*RSAPem)(nil),                // 2: mm_pb.RSAPem
	(*BaseRequest)(nil),           // 3: mm_pb.BaseRequest
	(*SKBuiltinString)(nil),       // 4: mm_pb.SKBuiltinString
	(*SKBuiltinStringBuffer)(nil), // 5: mm_pb.SKBuiltinStringBuffer
	(*BaseResponse)(nil),          // 6: mm_pb.BaseResponse
}
var file_base_common_proto_depIdxs = []int32{
	0, // 0: mm_pb.BaseResponse.ret:type_name -> mm_pb.RetConst
	4, // 1: mm_pb.BaseResponse.errMsg:type_name -> mm_pb.SKBuiltinString
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_base_common_proto_init() }
func file_base_common_proto_init() {
	if File_base_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AesKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RSAPem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinStringBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_common_proto_goTypes,
		DependencyIndexes: file_base_common_proto_depIdxs,
		EnumInfos:         file_base_common_proto_enumTypes,
		MessageInfos:      file_base_common_proto_msgTypes,
	}.Build()
	File_base_common_proto = out.File
	file_base_common_proto_rawDesc = nil
	file_base_common_proto_goTypes = nil
	file_base_common_proto_depIdxs = nil
}
